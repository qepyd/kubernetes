---
apiVersion: v1
kind: PersistentVolume
metadata:
  # 其PersistentVolume资源对象是非namespace级别的
  # 各对象的名不能冲突，所以其name的前缀为项目名。
  name: jmsco-app01
  labels: 
    project: jmsco
    app: app01
spec:
  # 树内卷插件之nfs对接"存储系统及存储系统中已存在的数据卷"
  nfs:
    server: 172.31.7.203
    path: /data/jmsco/app01/
    readOnly: false
 
  # 卷模式(必须)
  #   默认为Filesystem，还支持Block。
  #   pvc来匹配时,第一顺序。
  volumeMode: Filesystem

  ## 所属的storageClass
  #  pvc来匹配时,第三顺序,第二顺序是此资源对象的labels
  storageClassName: "jmsco-static-nfs" 

  ## 访问模式
  #  必须的，没有默认值。
  #  pvc来匹配时,第四顺序。
  accessModes:
  - ReadWriteMany

  ## 能力,即大小
  #  pvc来匹配时,第五顺序
  capacity:
    storage: 10Gi

  ## pv资源对象的回收策略
  #  回收策略：当删除与之匹配的pvc资源对象后，如何处理pv资源对象。
  #  策略根据：kubectl explain pv.spec.persistentVolumeReclaimPolicy 查看(因为k8s的版本)
  #  Retain(保留),默认值
  #    含义：
  #      手动回收。即需要手动删除pv资源对象。删除pv资源对象是不会影响存储系统中的数据的。
  #      若不手动回收，此pv资源对象不会再被任何pvc资源对象所绑定(即使是之前与之匹配的pvc重建)。
  #  Delete(删除)
  #    含义：
  #      删除pv资源对象。删除pv资源对象是不会影响存储系统中的数据的。
  #    注意：
  #      当树内卷插件为nfs时，是无法达到此回收策略的效果的（即此pv资源对象不会被删除，那么此pv资源
  #      对象不会再被任何pvc资源对象所绑定(即使是之前与之匹配的pvc重建)。
  #  Recycle（回收）
  #    含义：
  #      简单擦除（rm -rf /thevolume/*）。
  #      这是一个较旧的处理方式，已经被废弃。在 Kubernetes 1.17 版本之后，Recycle 策略已被移除，不再支持。
  persistentVolumeReclaimPolicy: Delete
---
