--- 
### 说明
# n-ep-is-pod-clusterip-externalip-inerexternaltrafficpolicy-c-l 
# n
#  表示NodePort类型,人类可读
# ep-is-pod
#  表示svc的后端端点是Pod,那么肯定是要有标签选择器(selector)的
# clusterip-externalip
#  表示具备CLUSTER-IP和EXTERNAL-IP。
#  NodePort类型的svc必须得有CLUSTER-IP
#  当有CLUSTER-IP时,各worker node上的kube-proxy就会介入,
#  所以各worker node上会有CLUSTER-IP和EXTERNAL-IP的规则。
#  另外：EXTERNAL-IP不受内部/外部流量策略的影响。
# inerexternaltrafficpolicy-c-l
#  表示内部/外部流量策略分别为Cluster和Local,默认均是Cluster
#

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: lili
  name: my-app004
  labels:
    deploy: my-app004
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-app004
  template:
    metadata:
      labels:
        app: my-app004
    spec:
      containers:
      - name: my-app004
        image: swr.cn-north-1.myhuaweicloud.com/library/nginx:1.16
        ports:
        - name: http-80
          containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  namespace: lili
  name: n-ep-is-pod-clusterip-externalip-inerexternaltrafficpolicy-c-l 
  #name: my-app004 
  labels:
    svc: n-ep-is-pod-clusterip-externalip-inerexternaltrafficpolicy-c-l 
    #svc: my-app004
  ## 指定从哪个地方获得EXTERNAL-IP
  #  因为是NodePort类型,所以无法在此处去获得,
  #  只能在spec.externalIPs处手动静态指定。
  #  这里可于测试。
  #    注释掉spec.externalIPs字段
  #    打开以下的注释
  #annotations:
    #lb.kubesphere.io/v1alpha1: openelb
    # 指定非namespaces级别的eips资源对象,从里面自动获取一个地址
    #eip.openelb.kubesphere.io/v1alpha2: eip-sample-pool
    # 自动指定EIP地址。 
    # eip.openelb.kubesphere.io/v1alpha1: "172.31.110.22"

spec:
  ## 标签选择器
  selector:
    app: my-app004

  ## 类型
  type: NodePort

  ## CLUSTER-IP
  #  其NodePort类型的必须得有CLUSTER-IP,
  #  这里让其自动获得
  clusterIP: ""

  ## 内部流量策略,默认也是为Cluster
  internalTrafficPolicy: Cluster

  ## EXTERNAL-IP
  #  NodePort类型的svc只能在这里手动指定,不能在
  #  metadata.annotations处指定从哪获得。
  #  另外：它在各worker node上受外部流量策略的影响
  #  因为有CLUSTER-IP,kube-proxy会介入,各worker node的内核中就有
  #  CLUSTER-IP及EXTERNAL-IP的规则。
  externalIPs:
  - 172.31.111.22

  ## 外部流量策略,默认为Cluster
  #  NodePort类型的svc其EXTERNAL-IP和NODE-IP受外部
  #  流量策略的影响
  externalTrafficPolicy: Local 

  ## svc资源对象的端口列表
  ports:
    - name: http-80
      ## 此字段是必须的，svc资源对象中的端口。因为有CLUSTER-IP：
      port: 81  # 这里应该和targetPort其具体的值(端口)保持一致,但这为了学习

      ## svc作代理时使用的协议,只支持TCP、UDP、SCP.默认为TCP
      protocol: TCP

      ## Pod中某容器里面应用的端口,你应该知道的,或者Pod的manifests中
      ## 有显示说明(例如：pods.spec.containers.ports.containerPort)
      ## 也可指定显示说明中某列表的name(pods.spec.container.ports.name)
      #targetPort: 80
      targetPort: http-80

      ## 其tagetPort端口的应用协议
      appProtocol: http

      ## 因为此svc是NodePort类型,所以必须得有nodePort,人为是关闭不了的
      #  nodePort是有范围的,由kube-apiserver组件的
      #    --service-node-port-range参数指定,默认是30000-32767
      #  此字段其值的类型是<integer>
      #  没有此字段或者为字段没值时,时随机分配。
      #  也可人为静态指定,容易冲突。
      #nodePort:
      #nodePort: 30000

