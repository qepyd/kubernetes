---
## 通过svc资源对象的name来说明
# c-nohaveselector-haveclusterip-internaltrafficpolicycluster 
#   c
#    人类可读,表示ClusterIP类型
#   nothave-selector-have-clusterip-internaltrafficpolicy-cluster
#     是svc资源对象的name
#     nothave-selector(没有标签选择器)
#       那么其svc的后端端点只能k8s集群外的某服务相关实例
#       我会手动创建ep资源对象,再创建与之同名的svc资源对象
#       创建ep资源对象时,无法手动指定相应pod,因为pod的IP是变动的
#     have-clusterip(有clusterip)
#       不会人为干预让其不拥有clusterip
#       那么此svc资源对象是head service，相对于headless service来说
#     internaltrafficpolicy-cluster
#       表示内置流量策略为cluster,默认值是cluster

---
apiVersion: v1
kind: Endpoints
metadata:
  namespace: lili
  name: c-ep-not-pod-clusterip-internaltrafficpolicy-c 
  labels:
    ep: c-ep-not-pod-clusterip-internaltrafficpolicy-c 
subsets:
  # 指定相应端点的IP(我这是我k8s其各master的IP)，且address.ip还是改选字段
  # 如果后端端点是Pod副本呢,IP地址是随机的,这里就无法指定。
  #   那么也不会自行创建ep资源对象,再结合无selector的svc资源对象。
  - addresses:
      - ip: "172.31.7.201"
      - ip: "172.31.7.202"
      - ip: "172.31.7.203"
    ports:
      - name: kube-apiserver
        port: 6443
        protocol: TCP
        appProtocol: https

--- 
apiVersion: v1
kind: Service
metadata:
  namespace: lili
  # 其名字得和ep/c-ep-not-pod-clusterip-internaltrafficpolicy-c对象一样
  name: c-ep-not-pod-clusterip-internaltrafficpolicy-c 
  labels:
    svc: c-ep-not-pod-clusterip-internaltrafficpolicy-c 
spec:
  ## 因后端端点不是Pod,所以不用标签选择器(不用标签选择器)
  # selector:
  #   app: my-app01
  
  ## 类型,不指定时默认就为ClusterIP类型。
  type: ClusterIP

  ## CLUSTER-IP,在些场景(svc后端端点非Pod)下应该有
  # 不指定或指定为""时，自动获取CLUSTER-IP，
  # 也可人为指定CLUSTER-IP，不这样做，
  # 当指定为None时,是不会获取CLUSTER-IP。
  clusterIP: ""

  ## EXTERNAL-IP
  # externalIPs:
  #   - IP地址(只能手动指定,但此场景下,无用处)

  ## 内部流量策略,默认为Cluster
  #  此场景(svc后端端点不是Pod,svc有CLUSTER-IP)
  #  那么svc集群内的client(Pod)可访问,那么此内
  #  部流量策略䚱为Cluster。
  internalTrafficPolicy: Cluster

  # 端口定义
  ports:
    - name: kube-apiserver
      # svc资源对象中的端口
      port: 6443
      # svc作代理时使用的协议,只支持TCP、UDP、SCP
      protocol: TCP
      # Pod中某容器里面应用的端口
      # 或者是pods.spec.containers.ports字段中某列表的name
      targetPort: 6443
      # 其tagetPort端口的应用协议
      appProtocol: https
