apiVersion: v1
kind: Pod
metadata:
  namespace: lili
  name: ports-01 
  labels:
    app: ports-01
spec:
  ## Pod级别
  # 我这为了实验,为Pod指派worker node
  nodeName: node01

  ## 容器级别之主容器
  containers:
  - name: myapp01
    image: swr.cn-north-1.myhuaweicloud.com/library/nginx:1.16
    imagePullPolicy: Always

    ## 我这儿是进行"端口暴露"
    ports:
      # Pod中各主容器其ports字段下的列表名不能重复。
      #   A:建议其name的格式为：协议-port 
      #   B:Pod中各容器是共享Network名称空间,所以会杜绝Port冲突
      #   C:其它资源对象(例如svc资源对象)匹配到此Pod后,可以调用这儿的列表名
    - name: http-80
      # 容器中应用程序的实际端口
      containerPort: 80
      # 四层协议,只支持TCP和UDP
      protocol: "TCP"
      # 范围0~65535,Pod中各主容器中其ports字段中hostPort的值不能冲突。
      # 若Pod级别指定hostNetwork字段的值为true,那么这里的值应该和containerPort
      # 字段的值一样。
      # PS:同一worker node上各容器在做端口映射时,其host port不能冲突 
      hostPort: 8080
---
apiVersion: v1
kind: Pod
metadata:
  namespace: lili
  name: ports-02
  labels:
    app: ports-02
spec:
  ## Pod级别
  # 我这为了实验,为Pod指派worker node
  nodeName: node01

  ## 容器级别之主容器
  containers:
  - name: myapp01
    image: swr.cn-north-1.myhuaweicloud.com/library/nginx:1.16
    imagePullPolicy: Always

    ## 我这儿是进行"端口暴露"
    ports:
    - name: http-80
      containerPort: 80
      protocol: "TCP"
      # 我这儿,为了实践，与pods/ports-01对象的冲突了
      hostPort: 8080

